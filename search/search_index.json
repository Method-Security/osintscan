{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"osintscan Documentation","text":"<p>Hello and welcome to the osintscan documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with osintscan</li> <li>See the Docs section for a comprehensive rundown of osintscan capabilities</li> </ul>"},{"location":"index.html#about-osintscan","title":"About osintscan","text":"<p>osintscan has been designed to provide security teams with an easy-to-use yet data-rich suite of open source intelligence (OSINT) capabilities to help them better understand the internet exposure of the networks they defend. Designed with data-modeling and data-integration needs in mind, osintscan can be used on its own as an interactive CLI, orchestrated as part of a broader data pipeline, or leveraged from within the Method Platform.</p> <p>The types of scans that osintscan can conduct are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about osintscan, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-osintscan","title":"Get osintscan","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/osintscan</code></li> <li><code>docker run ghcr.io/method-security/osintscan</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>osintscan dns records --domain example.com\n</code></pre> <pre><code>osintscan dns certs --domain example.com\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to osintscan? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie osintscan into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>osintscan is a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, osintscan breaks every unique network scan into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>osintscan</code> CLI</li> <li>You can use <code>cmd/dns.go</code> as a template</li> <li>Your file needs to be a member function of the <code>osintscan</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>osintscan</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/dns</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new scan to osintscan, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned osintscan for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/osintscan/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/osintscan</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As osintscan uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/index.html","title":"Capabilities","text":"<p>osintscan offers a variety of techniques that allow security teams to leverage open source intelligence (OSINT) capabilities to better understand their internet facing exposure. Each of the below pages offers you an in depth look at a osintscan capability related to a unique technique.</p> <ul> <li>DNS</li> <li>Shodan</li> </ul>"},{"location":"docs/index.html#top-level-flags","title":"Top Level Flags","text":"<p>osintscan has several top level flags that can be used on any subcommand. These include:</p> <pre><code>Flags:\n  -h, --help                 help for osintscan\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/index.html#version-command","title":"Version Command","text":"<p>Run <code>osintscan version</code> to get the exact version information for your binary</p>"},{"location":"docs/index.html#output-formats","title":"Output Formats","text":"<p>For more information on the various output formats that are supported by osintscan, see the Output Formats page in our organization wide documentation.</p>"},{"location":"docs/dns.html","title":"DNS","text":"<p>The <code>osintscan dns</code> family of commands provides security teams with an easy to use mechanism to dig into information available within the DNS infrastructure.</p>"},{"location":"docs/dns.html#certs","title":"Certs","text":"<p>The <code>osintscan dns certs</code> command returns information about the certificate chains that are being leveraged by the specified domain.</p>"},{"location":"docs/dns.html#usage","title":"Usage","text":"<pre><code>osintscan dns certs --domain example.com\n</code></pre>"},{"location":"docs/dns.html#help-text","title":"Help Text","text":"<pre><code>osintscan dns certs -h\nGather DNS certs for a given domain\n\nUsage:\n  osintscan dns certs [flags]\n\nFlags:\n      --domain string   Domain to get DNS certs for\n  -h, --help            help for certs\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/dns.html#records","title":"Records","text":""},{"location":"docs/dns.html#usage_1","title":"Usage","text":"<pre><code>osintscan dns records --domain example.com\n</code></pre>"},{"location":"docs/dns.html#help-text_1","title":"Help Text","text":"<pre><code>$ osintscan dns records -h\nGather DNS records for a given domain\n\nUsage:\n  osintscan dns records [flags]\n\nFlags:\n      --domain string   Domain to get DNS records for\n  -h, --help            help for records\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/dns.html#subenum","title":"Subenum","text":""},{"location":"docs/dns.html#usage_2","title":"Usage","text":"<pre><code>osintscan dns subenum --domain example.com\n</code></pre>"},{"location":"docs/dns.html#help-text_2","title":"Help Text","text":"<pre><code>$ osintscan dns subenum -h\nPassively enumerate subdomains for a given domain\n\nUsage:\n  osintscan dns subenum [flags]\n\nFlags:\n      --domain string   Domain to get subdomains for\n  -h, --help            help for subenum\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/shodan.html","title":"Shodan","text":"<p>The <code>osintscan shodan</code> family of commands leverage the Shodan search engine to provide open source intelligence on exposed internet assets.</p>"},{"location":"docs/shodan.html#authentication","title":"Authentication","text":"<p>All the <code>osintscan shodan</code> commands leverage the Shodan API, which needs an API key in order to authenticate. All commands read from a <code>SHODAN_API_KEY</code> environment variable or from a <code>--apikey</code> flag where you can include your Shodan API key.</p>"},{"location":"docs/shodan.html#hostname","title":"Hostname","text":""},{"location":"docs/shodan.html#usage","title":"Usage","text":"<pre><code>osintscan shodan hostname --hostname example.com\n</code></pre>"},{"location":"docs/shodan.html#help-test","title":"Help Test","text":"<pre><code>$ osintscan shodan hostname -h\nQuery Shodan for a hostname string search\n\nUsage:\n  osintscan shodan hostname [flags]\n\nFlags:\n      --apikey string     Shodan API Key (reads from SHODAN_API_KEY env by default)\n  -h, --help              help for hostname\n      --hostname string   The hostname suffix you want to ensure the Shodan record contains\n      --query string      Query string to search Shodan hostname:{} for\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary allows you to skip dealing with any container related networking issues and leverage the same network interface that the host machine is using.</p> <pre><code>osintscan dns certs --domain example.com\n</code></pre>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running osintscan within a Docker container should typically work similarly to running directly on a host, however, occasionally there are a few things to keep in mind.</p> <p>If you're running on a Docker container on a MacOS machine and you are trying to scan a locally running service, you can leverage the <code>host.docker.internal</code> address as mentioned in the Docker documentation here.</p> <pre><code>docker run methodsecurity/osintscan \\\n  dns \\\n  certs \\\n  --domain example.com\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with osintscan, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>osintscan is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>osintscan currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux 386 Linux arm (goarm 7) Linux amd64 Linux arm64 MacOS amd64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for osintscan are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/osintscan\n</code></pre> <pre><code>docker pull methodsecurity/osintscan\n</code></pre>"}]}